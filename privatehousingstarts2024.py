# -*- coding: utf-8 -*-
"""PrivateHousingStarts2024.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AhGYQF5VeYBdyOGezEb5fBhvU1ywKcYN
"""

# Access the data set; `sheet_name=None` means import all sheets from the workbook.
from pandas import read_excel
data=read_excel("https://www.census.gov/construction/nrc/xls/starts_cust.xlsx", sheet_name=None, header=[5, 5, 5, 5])

# Extract rows 0 to 779 and columns 0 to 1 from the "Not Seasonally Adjusted" sheet.
# Note: Change 780 to 781 to include January 2024.
df = data["Not Seasonally Adjusted"].iloc[0:780, 0:2]
# Update the column headers
df.columns = ["Month", "PHS"]
# Get the phs `Series` by itself
phs = df["PHS"]
# Label the rows of `phs` by the month
phs.index = df["Month"]
print(phs)

# Do an initial exploratory plot
from matplotlib import pyplot as plt
plt.plot(phs)
plt.show()

###################################################################
# Do some initial setup.
###################################################################

# Imports needed in this block of code
from matplotlib import pyplot as plt
from pandas import concat
from statsmodels.tsa.api import ExponentialSmoothing

###################################################################
# Partition the data before analyzing.
###################################################################

# Use the last `holdout` months as the out-of-sample holdout/validation data set
holdout = 24
train_phs = phs[:-holdout]
test_phs = phs[-holdout:]

###################################################################
# The actual analysis starts here.
###################################################################

# Use the `train_phs` data to fit a triple exponential smoothing model with 12 seasons (we have monthly data!)
pre_model_train = ExponentialSmoothing(train_phs, trend="additive", seasonal="multiplicative", seasonal_periods=12, freq="MS")
model_train = pre_model_train.fit()

# Forecast the values for the times in `test_phs` using the `train_phs` data
forecast = model_train.forecast(steps=holdout)
forecast.name = "Forecast"

###################################################################
# Compute the MAPE error metrics.
###################################################################

# Define a convenience function to find the MAPE error metric
def mape(forecast, actual):
    return (abs(actual - forecast)/actual).mean()

# Find the MAPE values
mape_train = mape(model_train.fittedvalues, train_phs)
mape_test = mape(forecast, test_phs)

###################################################################
# The rest of this block of code simply outputs the results.
###################################################################

# Create a `DataFrame` with the actual values and the forecasted values for the holdout
validate_phs = concat([test_phs, forecast], axis="columns")

# Print the holdout `DataFrame` and the MAPE for both the training and testin data
print("Actual and forecasted PHS:")
print(validate_phs)
print()
print("MAPE for the training data:", mape_train)
print("MAPE for the testing data:", mape_test)
print()

# Plot the actual data, fitted values (estimated from `train_phs`), and forecasted values (over the holdout)
plt.plot(phs, color="gray", label="Actual")
plt.plot(model_train.fittedvalues, color="black", linestyle="dashed", label="Fitted")
plt.plot(forecast, color="black", linestyle="dotted", label="Forecasted")
plt.legend()
plt.show()

# Print the summary of the fitted model (including the values of the smoothing constants)
print(model_train.summary())